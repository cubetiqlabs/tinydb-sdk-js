name: Publish SDK to npm & Create Release

on:
    push:
        tags:
            - "v*"

jobs:
    publish:
        name: Publish to npm & Create Release
        runs-on: ubuntu-latest
        permissions:
            contents: write # need write to create release
            id-token: write # For npm provenance (recommended for security)
        steps:
            - name: Checkout (full history for tags & logs)
              uses: actions/checkout@v5
              with:
                  fetch-depth: 0
            - name: Setup Node.js
              uses: actions/setup-node@v5
              with:
                  node-version: 22
                  registry-url: "https://registry.npmjs.org"
                  cache: npm
                  cache-dependency-path: "package-lock.json"

            - name: Verify tag matches package version
              id: verify
              run: |
                  TAG="${GITHUB_REF#refs/tags/}"
                  echo "Tag: $TAG"
                  PKG_VERSION=$(node -p "require('./package.json').version")
                  EXPECTED="v${PKG_VERSION}"
                  echo "Package version: ${PKG_VERSION}"
                  echo "Expected tag: ${EXPECTED}"
                  if [ "$TAG" != "$EXPECTED" ]; then
                    echo "Tag ($TAG) does not match package version ($EXPECTED)." >&2
                    exit 1
                  fi

            - name: Install dependencies
              run: |
                  if [ -f package-lock.json ]; then
                    npm ci --no-fund --no-audit
                  else
                    npm install --no-fund --no-audit
                  fi

            - name: Run tests
              run: npm test --silent

            - name: Build
              run: npm run build

            - name: Verify publish contents (dry-run)
              run: |
                  node - <<'NODE'
                  const { execSync } = require('node:child_process');
                  const raw = execSync('npm pack --dry-run --json', { stdio: ['ignore', 'pipe', 'inherit'] }).toString();
                  const info = JSON.parse(raw)[0];
                  const files = info.files.map(f => f.path);
                  const allowExact = new Set([
                    'package.json',
                    'README', 'README.md', 'README.txt',
                    'LICENSE', 'LICENSE.md', 'LICENSE.txt',
                    'CHANGELOG', 'CHANGELOG.md', 'CHANGELOG.txt'
                  ]);
                  const bad = files.filter(p => {
                    if (allowExact.has(p)) return false;
                    if (p.startsWith('dist/')) return false;
                    return true;
                  });
                  if (bad.length) {
                    console.error('Refusing to publish non-build files:', bad);
                    process.exit(1);
                  }
                  console.log('Files to be published:', files);
                  NODE

            - name: Publish to npm
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
              run: |
                  npm publish --access public --provenance

            - name: Generate release notes
              id: notes
              run: |
                  set -euo pipefail
                  TAG_REF="${GITHUB_REF}"
                  TAG="${TAG_REF#refs/tags/}"
                  echo "Tag: $TAG"
                  PREV_TAG=$(git tag --list 'v*' --sort=-v:refname | grep -v "^$TAG$" | head -n1 || true)
                  echo "Previous tag: ${PREV_TAG:-<none>}"
                  CHANGELOG_TMP=$(mktemp)
                  echo "# $TAG" >> "$CHANGELOG_TMP"
                  echo >> "$CHANGELOG_TMP"
                  if [ -n "$PREV_TAG" ]; then
                    echo "Changes since $PREV_TAG:" >> "$CHANGELOG_TMP"
                    echo >> "$CHANGELOG_TMP"
                    git log --pretty=format:'- %s (%h)' "$PREV_TAG..HEAD" -- . || true >> "$CHANGELOG_TMP"
                  else
                    echo "Initial release." >> "$CHANGELOG_TMP"
                    echo >> "$CHANGELOG_TMP"
                    git log --pretty=format:'- %s (%h)' -n 50 -- . || true >> "$CHANGELOG_TMP"
                  fi
                  echo >> "$CHANGELOG_TMP"
                  echo "Generated notes:" >&2
                  cat "$CHANGELOG_TMP" >&2
                  BODY=$(cat "$CHANGELOG_TMP" | jq -Rs .)
                  echo "body<<EOF" >> $GITHUB_OUTPUT
                  echo "$BODY" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT
                  echo "tag=$TAG" >> $GITHUB_OUTPUT

            - name: Create GitHub Release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  TAG="${{ steps.notes.outputs.tag }}"
                  BODY="${{ steps.notes.outputs.body }}"
                  echo "Creating release for $TAG"
                  jq -n --arg tag "$TAG" --arg name "$TAG" --arg body "$BODY" '{ tag_name: $tag, name: $name, body: $body, draft: false, prerelease: false }' > release.json
                  curl -sSL -X POST -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" \
                    "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases" \
                    -d @release.json | jq -r '.html_url // .message'
                  echo "Release created." >> $GITHUB_STEP_SUMMARY
                  echo "Tag: $TAG" >> $GITHUB_STEP_SUMMARY
                  echo "Notes generated from commits." >> $GITHUB_STEP_SUMMARY
